plugins {
    id 'ru.vyarus.mkdocs' version '2.4.0'
}

apply plugin: 'application'
apply plugin: 'java'

group 'net.ddns.minersonline'
version rootProject.version

mkdocs.publish {
    docPath = '0.0.3'
    rootRedirect = true
}

targetCompatibility = 16
sourceCompatibility = 16

repositories {
    mavenCentral()
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
    maven {
        name = "minecraft-libraries"
        url = "https://libraries.minecraft.net"
    }
    maven {
        name = "sonatype-nexus-snapshots"
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
//    flatDir {
//        dirs "E:\\web\\maven\\repositories\\releases"
//    }
}

ext {
    lwjgl_version = "3.3.1"
    gson_version = "2.9.0"
    commoms_cli_version = "1.5.0"
    commoms_codec_version = "1.15"
    httpclient_version = "4.5.13"
    imguiVersion = '1.86.4'
}

test {
    useJUnitPlatform()
}

run.dependsOn(':gameplay:build')
run.dependsOn(':gameplay:assemblePlugin')

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'slf4j-log4j12') {
            details.useTarget "org.apache.logging.log4j:log4j-slf4j-impl:2.17.2"
        }
    }
}

task RunGame(type: JavaExec) {
    dependsOn ':gameplay:jar'
    classpath sourceSets.main.runtimeClasspath
    main = "net.ddns.minersonline.HistorySurvival.Game"
    jvmArgs "-Xms1024m", "-Xmx2048m"

    if(project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def access = properties.getProperty('access') //Player access token
        def user = properties.getProperty('user') //Player display name
        def uuid = properties.getProperty('uuid') //Player uuid name
        def gameDir = project.rootProject.file("run_client").absolutePath.toString()
        if (properties.containsKey("auth")) {
            environment "AUTH_URL", properties.getProperty('auth')
        }

        args "--accessToken", access, "--username", user, "--uuid", uuid, "--gameDir", gameDir
    }
}

task RunServer(type: JavaExec) {
    dependsOn ':gameplay:jar'
    classpath sourceSets.main.runtimeClasspath

    if(project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        if (properties.containsKey("auth")) {
            environment "AUTH_URL", properties.getProperty('auth')
        }
    }

    //jvmArgs "-Xms1024m -Xmx2048m"
    main = "net.ddns.minersonline.HistorySurvival.ServerMain"
}

sourceSets {
    main {
        java.srcDir file('src/main/java')
        resources.srcDir file('src/main/resources')
        compileClasspath = compileClasspath + configurations.runtimeClasspath
        runtimeClasspath = output + compileClasspath
    }
}

dependencies {
    implementation project(path: ':api')
    implementation project(path: ':gameplay')

    implementation "commons-cli:commons-cli:${commoms_cli_version}"
    implementation "commons-codec:commons-codec:${commoms_codec_version}"
    implementation "org.apache.httpcomponents:httpclient:${httpclient_version}"



    implementation group: 'org.pf4j', name: 'pf4j', version: "${pf4j_version}"

    implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.17.2"
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

    implementation "org.lwjgl:lwjgl:$lwjgl_version"
    implementation "org.lwjgl:lwjgl-assimp:$lwjgl_version"
    implementation "org.lwjgl:lwjgl-glfw:$lwjgl_version"
    implementation "org.lwjgl:lwjgl-openal:$lwjgl_version"
    implementation "org.lwjgl:lwjgl-opengl:$lwjgl_version"
    implementation "org.lwjgl:lwjgl-stb:$lwjgl_version"
    implementation 'org.jetbrains:annotations:20.1.0'

    runtimeOnly "org.lwjgl:lwjgl:$lwjgl_version:natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-assimp:$lwjgl_version:natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-glfw:$lwjgl_version:natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-openal:$lwjgl_version:natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-opengl:$lwjgl_version:natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-stb:$lwjgl_version:natives-linux"

    runtimeOnly "org.lwjgl:lwjgl:$lwjgl_version:natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-assimp:$lwjgl_version:natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-glfw:$lwjgl_version:natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-openal:$lwjgl_version:natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-opengl:$lwjgl_version:natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-stb:$lwjgl_version:natives-macos"

    runtimeOnly "org.lwjgl:lwjgl:$lwjgl_version:natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-assimp:$lwjgl_version:natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-glfw:$lwjgl_version:natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-openal:$lwjgl_version:natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-opengl:$lwjgl_version:natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-stb:$lwjgl_version:natives-windows"

    implementation "org.joml:joml:${joml_version}"


    implementation "io.github.spair:imgui-java-binding:$imguiVersion"
    implementation "io.github.spair:imgui-java-lwjgl3:$imguiVersion"

    implementation "io.github.spair:imgui-java-natives-windows:$imguiVersion"
    implementation "io.github.spair:imgui-java-natives-linux:$imguiVersion"
    implementation "io.github.spair:imgui-java-natives-macos:$imguiVersion"


    implementation "com.google.code.gson:gson:${gson_version}"
    implementation "com.google.guava:guava:${guava_version}"

    implementation "com.mojang:brigadier:${brigadier_version}"
    implementation "com.google.guava:guava:${guava_version}"
    implementation "com.google.code.gson:gson:${gson_version}"

    implementation('io.netty:netty-all:4.1.77.Final')
    implementation 'com.github.Querz:NBT:6.1'
}

task copyToLib(type: Copy) {
    into "$buildDir/out_libs"
    from configurations.runtimeClasspath
}

task buildJsonDefs(type:Exec){
    dependsOn 'jar'
    dependsOn 'copyToLib'
    commandLine "python",
            "../buildTools/build_json_defs_v2.py",
            "$buildDir/${version}.json",
            "$buildDir/out_libs",
            "$project.name-${version}.jar",
            "$buildDir/libs",
            "$version"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}